{"version":3,"sources":["constants/symbols.js","utils/isEven.js","services/squares.js","components/GameKeyboardInput.js","components/GameBoard.js","components/Game.js","components/Slash.js","App.js","constants/routes.js","reportWebVitals.js","utils/isLocalHost.js","actions/types.js","store/reducer.js","index.js","store/configureStore.js"],"names":["set1","icon","label","set2","set3","isEven","num","symbolsToSquares","symbolSet","dupeSymbolSet","alphabetArray","split","yCount","xCount","gridUnit","parseInt","Math","sqrt","length","shuffle","map","symbol","i","yLabel","serializedSymbol","id","toString","xLabel","serializeSymbolSet","isValidSymbolSet","toast","error","toastId","autoClose","squareColumnClasses","symbolsLen","GameKeyboardInput","onSubmit","loading","className","e","preventDefault","inputOrderedPair","currentTarget","value","name","type","maxLength","minLength","autoFocus","disabled","GameTitle","styled","h1","GameBoardContainer","div","GameSquareContainer","GameSquare","props","GameBoard","squares","symbols","numRounds","loadNextRound","useState","currentRound","setCurrentRound","roundLoaded","setRoundLoaded","setLoading","userWon","setUserWon","prevOrderedPair","setPrevOrderedPair","orderedPair","setOrderedPair","correctOrderedPairs","setCorrectOrderedPairs","useEffect","resetForNextSelection","keyboardInput","document","getElementById","focus","selectOrderedPair","selectedOrderedPair","sop","toUpperCase","square","dismiss","dataset","cop","setTimeout","showIcon","visibility","undefined","Object","keys","success","data-label","onClick","style","fontSize","nextRound","handleLoadNextRound","Game","roundData","setSquares","setSymbols","round","symbolsData","Slash","App","basename","exact","path","component","position","hideProgressBar","newestOnTop","closeOnClick","rtl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","RESET_CURRENT_FILES","initialState","reducer","state","action","store","preloadedState","middlewares","thunkMiddleware","middlewareEnhancer","applyMiddleware","enhancers","composedEnhancers","composeWithDevTools","createStore","dispatch","rawDispatch","addPromiseSupport","configureStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.016cd87f.chunk.js","sourcesContent":["export const set1 = [\n  {\n    icon: 'fas fa-cat',\n    label: 'Cat'\n  },\n  {\n    icon: 'fas fa-feather',\n    label: 'Feather'\n  }\n];\n\nexport const set2 = [\n  {\n    icon: 'fas fa-star',\n    label: 'Star'\n  },\n  {\n    icon: 'fas fa-dragon',\n    label: 'Dragon'\n  },\n  {\n    icon: 'fas fa-fish',\n    label: 'Fish'\n  },\n  {\n    icon: 'far fa-sun',\n    label: 'Sun'\n  }\n];\n\nexport const set3 = [\n  {\n    icon: 'fas fa-dog',\n    label: 'Dog'\n  },\n  {\n    icon: 'fas fa-bell',\n    label: 'Bell'\n  },\n  {\n    icon: 'fas fa-cut',\n    label: 'Scissors'\n  },\n  {\n    icon: 'fas fa-bus-alt',\n    label: 'Bus'\n  },\n  {\n    icon: 'fas fa-moon',\n    label: 'Moon'\n  },\n  {\n    icon: 'fas fa-plane',\n    label: 'Airplane'\n  },\n  {\n    icon: 'fas fa-crow',\n    label: 'Bird'\n  },\n  {\n    icon: 'fas fa-tree',\n    label: 'Tree'\n  }\n];\n","const isEven = (num) => {\n  if (num < 2) return false;\n  if (num % 2 > 0) return false;\n\n  return true;\n};\n\nexport default isEven;\n","import { shuffle } from 'lodash';\nimport { toast } from 'react-toastify';\nimport isEven from '../utils/isEven';\n\n/**\n * @summary generates ordered pairs based on symbol set\n * @param {array of objects} symbolSet\n * @returns array of objects with ordered pairs values as value of \"id\"\n */\nexport const serializeSymbolSet = (symbolSet) => {\n  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const alphabetArray = alphabet.split('');\n  let yCount = 0; // Y-Axis Label Count\n  let xCount = 0; // X-Axis Label Count\n  const gridUnit = parseInt(Math.sqrt(symbolSet.length), 10);\n  const randomSymbolSet = shuffle(symbolSet);\n  const serializedSymbolSet = randomSymbolSet.map((symbol, i) => {\n    if (i === gridUnit || (yCount > 0 && i % gridUnit === 0)) {\n      yCount += 1;\n    }\n\n    xCount += 1;\n\n    // yAxis Label\n    // yCount is increased when moving into second row\n    // ex: grid of 16 (gridUnit = 4)\n    let yLabel = '';\n    if (i === 0) {\n      // 0 = A\n      yLabel = alphabetArray[yCount];\n    } else if ((i + 1) === (yCount * gridUnit) + 1) {\n      // 5 = B : yCount (1) * gridUnit (4) + 1\n      // 9 = C : yCount (2) * gridUnit (4) + 1\n      // 13 = D : yCount (3) * gridUnit (4) + 1\n      yLabel = alphabetArray[yCount];\n    }\n    // yAxis Label\n\n    const serializedSymbol = {\n      ...symbol,\n      id: alphabetArray[yCount] + xCount.toString(),\n      yLabel,\n      xLabel: (i <= gridUnit - 1) ? i + 1 : ''\n    };\n\n    if (xCount === gridUnit) {\n      xCount = 0;\n    }\n\n    return serializedSymbol;\n  });\n\n  return serializedSymbolSet;\n};\n\n/**\n * @summary duplicates provided symbolSet and randomizes based on Fisher-Yates algorithm via lodash\n * @param {array of objects} symbolSet\n */\nexport const symbolsToSquares = (symbolSet) => {\n  const dupeSymbolSet = [\n    ...symbolSet,\n    ...symbolSet\n  ];\n  const randomSymbolSet = shuffle(dupeSymbolSet);\n  const serializedSymbolSet = serializeSymbolSet(randomSymbolSet);\n\n  return serializedSymbolSet;\n};\n\n/**\n * @summary error checking against provided symbol set\n * @param {array of objects} symbolSet\n */\nexport const isValidSymbolSet = (symbolSet) => {\n  // We need an even number of symbols to\n  // construct a playable grid where each card\n  // has the correct corresponding ordered pairs, ex: A3, B1\n  if (!isEven(symbolSet.length)) {\n    toast.error('An even number of symbols is required.', { toastId: 'evenSymbols', autoClose: false });\n    return false;\n  }\n\n  // Currently allow only 12 symbols\n  // TODO think through how to allow more\n  // 104 is technically the max, but running into\n  // UI limitations with bootstrap grid based on 12\n  if (symbolSet.length > 12) {\n    toast.error('12 symbols is the maximum allowed.', { toastId: 'evenSymbols', autoClose: false });\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * @summary creates appropriate bootstrap classes to show cards correctly\n * @param {array of objects} symbolSet\n */\nexport const squareColumnClasses = (symbolSet) => {\n  const symbolsLen = symbolSet.length;\n\n  if (symbolsLen === 2 || symbolsLen === 4) {\n    return 'col-6';\n  }\n\n  if (symbolsLen === 6) {\n    return 'col-4';\n  }\n\n  return 'col-3';\n};\n","import React from 'react';\n\nconst GameKeyboardInput = ({\n  onSubmit,\n  loading\n}) => {\n  const handleCheckOrderedPair = (e) => {\n    e.preventDefault();\n    const { inputOrderedPair } = e.currentTarget;\n\n    onSubmit(inputOrderedPair.value);\n  };\n\n  return (\n    <div className=\"m-auto\">\n      <form\n        onSubmit={handleCheckOrderedPair}\n      >\n        <input\n          id=\"keyboardInput\"\n          name=\"inputOrderedPair\"\n          type=\"text\"\n          maxLength=\"2\"\n          minLength=\"2\"\n          className=\"text-capitalize form-control-lg\"\n          autoFocus\n          disabled={loading}\n        />\n        <div className=\"text-muted text-center small\">\n          Enter ordered pair, ex: A2\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default GameKeyboardInput;\n","import React, { useEffect, useState } from 'react';\nimport { toast } from 'react-toastify';\nimport styled from 'styled-components';\nimport { squareColumnClasses } from '../services/squares';\nimport GameKeyboardInput from './GameKeyboardInput';\n\nconst GameTitle = styled.h1`\n  font-family: 'Orbitron', sans-serif;\n  text-align: center;\n  margin-bottom: 4rem;\n`;\n\nconst GameBoardContainer = styled.div`\n  max-width: 760px;\n`;\n\nconst GameSquareContainer = styled.div`\n  position: relative;\n`;\n\nconst GameSquare = styled.div`\n  min-height: 60px;\n  min-width: 60px;\n\n  &::before {\n    position: absolute;\n    content: \"${(props) => props.xLabel}\";\n    top: -40px;\n    color: black;\n  }\n\n  &::after {\n    position: absolute;\n    content: \"${(props) => props.yLabel}\";\n    left: -40px;\n    color: black;\n  }\n\n  @media (min-width: 600px) {\n    min-height: 80px;\n    min-width: 80px;\n  }\n`;\n\nconst GameBoard = ({\n  squares,\n  className,\n  symbols,\n  numRounds,\n  loadNextRound\n}) => {\n  const [currentRound, setCurrentRound] = useState(0);\n  const [roundLoaded, setRoundLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [userWon, setUserWon] = useState(false);\n  const [prevOrderedPair, setPrevOrderedPair] = useState(null);\n  const [orderedPair, setOrderedPair] = useState(null);\n  const [correctOrderedPairs, setCorrectOrderedPairs] = useState({});\n  // TODO support larger symbol sets than 12\n\n  useEffect(() => {\n    if (!roundLoaded) {\n      loadNextRound(currentRound);\n      setRoundLoaded(true);\n    }\n  }, [squares, symbols]);\n\n  const resetForNextSelection = () => {\n    const keyboardInput = document.getElementById('keyboardInput');\n\n    setOrderedPair(null);\n    setPrevOrderedPair(null);\n    setLoading(false);\n    keyboardInput.focus();\n  };\n\n  const selectOrderedPair = (selectedOrderedPair) => {\n    const sop = selectedOrderedPair.toUpperCase();\n    const square = document.getElementById(sop);\n    const keyboardInput = document.getElementById('keyboardInput');\n\n    toast.dismiss();\n\n    if (!square) {\n      toast.error('Guess ordered pairs within the grid.');\n\n      return false;\n    }\n\n    const { dataset: { label } } = square;\n\n    if (orderedPair) {\n      setPrevOrderedPair(orderedPair);\n    }\n\n    setOrderedPair([sop, label]);\n\n    // 0 = Ordered Pair, ex: A2\n    // 1 = Label, ex: Fish\n    if (orderedPair) {\n      // Check if labels are the same\n      // and if ordered pairs are different\n      setLoading(true);\n\n      if (orderedPair[1] === label && orderedPair[0] !== sop) {\n        const cop = {\n          ...correctOrderedPairs,\n          [sop]: label,\n          [orderedPair[0]]: orderedPair[1]\n        };\n\n        setCorrectOrderedPairs(cop);\n        // TODO function?\n        resetForNextSelection();\n      } else {\n        toast.error('Try again');\n        setTimeout(() => {\n          resetForNextSelection();\n        }, 1500);\n      }\n    }\n\n    keyboardInput.value = '';\n  };\n\n  const showIcon = (square) => {\n    let visibility = false;\n\n    if (correctOrderedPairs[square.id] !== undefined) {\n      visibility = true;\n    }\n\n    if (orderedPair && orderedPair[0] === square.id) {\n      visibility = true;\n    }\n\n    if (prevOrderedPair && prevOrderedPair[0] === square.id) {\n      visibility = true;\n    }\n\n    return visibility;\n  };\n\n  const handleLoadNextRound = () => {\n    const nextRound = currentRound + 1;\n    setUserWon(false);\n    setRoundLoaded(false);\n    setCorrectOrderedPairs({});\n    setCurrentRound(nextRound);\n    loadNextRound(nextRound);\n  };\n\n  if (!squares || !symbols) return null;\n\n  if (!userWon && Object.keys(correctOrderedPairs).length === squares.length) {\n    setUserWon(true);\n    toast.success('Nice job!');\n  }\n\n  return (\n    <GameBoardContainer\n      className={`m-auto px-5 d-flex align-items-center justify-content-center h-100 ${className || ''}`}\n    >\n      <div>\n        <GameTitle className=\"text-muted\">\n          Round {currentRound + 1}\n        </GameTitle>\n        <div className=\"row align-items-start\">\n          {squares.map((square, i) => (\n            <div\n              key={i}\n              className={squareColumnClasses(symbols)}\n            >\n              <GameSquareContainer>\n                <GameSquare\n                  id={square.id}\n                  data-label={square.label}\n                  className={`game-square bg-${correctOrderedPairs[square.id] !== undefined ? 'success' : 'secondary'} mb-3 d-flex align-items-center justify-content-center text-white`}\n                  xLabel={square.xLabel}\n                  yLabel={square.yLabel}\n                  onClick={() => {\n                    if (!loading) {\n                      selectOrderedPair(square.id);\n                    }\n                  }}\n                >\n                  {showIcon(square) && (\n                    <i className={square.icon} style={{ fontSize: '2rem' }} />\n                  )}\n                </GameSquare>\n              </GameSquareContainer>\n            </div>\n          ))}\n        </div>\n\n        {!userWon && (\n          <div\n            className=\"d-flex align-item-center justify-content-center flex-column\"\n          >\n            <div className=\"mx-auto mt-3\">\n              {/* <div\n                className=\"btn-group border rounded\"\n                role=\"group\"\n                aria-label=\"Basic example\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"btn btn-light border-right\"\n                >\n                  <i className=\"fas fa-keyboard\" />\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"btn btn-light\"\n                >\n                  <i className=\"fas fa-microphone\" />\n                </button>\n              </div> */}\n            </div>\n            <GameKeyboardInput\n              onSubmit={selectOrderedPair}\n              loading={loading}\n            />\n          </div>\n        )}\n\n        {userWon && (\n          <div\n            className=\"d-flex align-item-center justify-content-center flex-column\"\n          >\n            <div className=\"mx-auto mt-3\">\n              {!numRounds === (currentRound + 1) ? (\n                <div>\n                  <h4>\n                    <i className=\"fas fa-check-circle text-success\" /> You win!\n                  </h4>\n                </div>\n              ) : (\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary btn-lg\"\n                  onClick={() => {\n                    handleLoadNextRound();\n                  }}\n                >\n                  Next Round\n                </button>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </GameBoardContainer>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState } from 'react';\nimport { set1, set2, set3 } from '../constants/symbols';\nimport { isValidSymbolSet, symbolsToSquares } from '../services/squares';\nimport GameBoard from './GameBoard';\n\nconst Game = ({ className }) => {\n  const roundData = [set1, set2, set3];\n  const [squares, setSquares] = useState(null);\n  const [symbols, setSymbols] = useState(null);\n\n  const loadNextRound = (round = 0) => {\n    const symbolsData = roundData[round];\n\n    if (!isValidSymbolSet(symbolsData)) {\n      return null;\n    }\n\n    setSquares(symbolsToSquares(symbolsData));\n    setSymbols(symbolsData);\n  };\n\n  return (\n    <GameBoard\n      className={className}\n      squares={squares}\n      symbols={symbols}\n      numRounds={roundData.length}\n      loadNextRound={loadNextRound}\n    />\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nconst Slash = () => {\n  return (\n    <Game />\n  );\n};\n\nexport default Slash;\n","import React, { Fragment } from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { ToastContainer } from 'react-toastify';\n// import TopNav from '../TopNav';\nimport Slash from './components/Slash';\nimport { SLASH } from './constants/routes';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <Fragment>\n        {/* <TopNav /> */}\n        <div className=\"container-fluid\">\n          <Switch>\n            <Route exact path={SLASH} component={Slash} />\n          </Switch>\n        </div>\n        {/* <Modals /> */}\n        <ToastContainer\n          className=\"text-center\"\n          position=\"top-center\"\n          autoClose={3000}\n          hideProgressBar\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          // pauseOnFocusLoss\n          // draggable\n          // pauseOnHover\n        />\n      </Fragment>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","export const SLASH = '/';\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS,\n      getFID,\n      getFCP,\n      getLCP,\n      getTTFB\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default isLocalhost;\n","export const SET_CURRENT_FILES = 'SET_CURRENT_FILES';\nexport const RESET_CURRENT_FILES = 'RESET_CURRENT_FILES';\n","import {\n  RESET_CURRENT_FILES\n} from '../actions/types';\n\nconst initialState = {\n  loading: false\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case RESET_CURRENT_FILES:\n      return {\n        ...state,\n        ...action\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { applyMiddleware, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport isLocalhost from '../utils/isLocalHost';\n\n// import monitorReducersEnhancer from './enhancers/monitorReducers'\n// import loggerMiddleware from './middleware/logger'\nimport reducer from './reducer'; // import rootReducer from './reducers/index';\n\nconst addPromiseSupport = (store) => {\n  const rawDispatch = store.dispatch;\n  return (action) => {\n    if (typeof action.then === 'function') {\n      return action.then(rawDispatch);\n    }\n    return rawDispatch(action);\n  };\n};\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [thunkMiddleware]; // loggerMiddleware\n  const middlewareEnhancer = applyMiddleware(...middlewares);\n\n  const enhancers = [middlewareEnhancer]; // monitorReducersEnhancer\n  const composedEnhancers = isLocalhost ? composeWithDevTools(...enhancers) : middlewareEnhancer;\n  const store = createStore(reducer, preloadedState, composedEnhancers); // rootReducer\n\n  store.dispatch = addPromiseSupport(store);\n\n  return store;\n}\n"],"sourceRoot":""}